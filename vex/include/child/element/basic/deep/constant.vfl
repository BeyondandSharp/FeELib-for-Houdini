
#ifndef __CONSTANT_VFL__
#define __CONSTANT_VFL__

#include <precompile.vfl>

#if 1
    #include <constant.vfl>
#else
#endif

/*
these has been defined in <math.h>
#define PI               3.14159265358979323846  // pi 
#define 2PI              6.28318530717958647692  // pi*2
#define PI_2             1.57079632679489661923  // pi/2
#define 4PI              12.5663706143591729539  // pi*4
#define PI_4             0.78539816339744830962  // pi/4
#define SQRT2            1.41421356237309504880  // sqrt(2) 
#define 1_SQRT2          0.70710678118654752440  // 1/sqrt(2)
#define SQRT3            1.73205080756887729353  // sqrt(3)
#define 1_SQRT3          0.57735026918962576451  // 1/sqrt(3)
#define SQRTPI           1.7724538509055160273   // sqrt(PI)
#define SQRT2PI          2.50662827463100050242  // sqrt(2*PI)
#define SQRTPI_2         1.25331413731550025121  // sqrt(PI/2)
#define 1_3              0.3333333333333333333   // 1/3
#define LOG2             0.69314718055994530942  // log(2)
#define E                2.71828182845904523536  // e
#define E2               5.43656365691809047072  // 2*e
*/
#define 2PI              6.28318530717958647692  // pi*2
#define 4PI              12.5663706143591729539  // pi*4
#define 2E               5.43656365691809047072  // 2*e

#ifndef THRESHOLDp5
#define THRESHOLDp5 1e-05
#endif

#ifndef THRESHOLDn5
#define THRESHOLDn5 -1e-05
#endif

#ifndef THRESHOLDp6
#define THRESHOLDp6 1e-06
#endif

#ifndef THRESHOLDn6
#define THRESHOLDn6 -1e-06
#endif






#ifndef MININTS16
#define MININTS16 -32768
#endif

#ifndef MAXINTS16
#define MAXINTS16 32767
#endif

#ifndef MAXINTUNS16
#define MAXINTUNS16 65535
#endif

#ifndef MININTS32
#define MININTS32 -2147483648
#endif

#ifndef MAXINTS32
#define MAXINTS32 2147483647
#endif

#ifndef MAXINTUNS32
#define MAXINTUNS32 4294967295
#endif




#ifndef MINFS32
#define MINFS32 -3.4028235677973364274807346397956171e38
#endif

#ifndef MAXFS32
#define MAXFS32 3.4028235677973364274807346397956171e38
#endif



#ifndef MAXFUNS32
#define MAXFUNS32 MAXFS32
#endif


#ifndef MINFS64
#define MINFS64 -3.4028235677973364274807346397956171e38
#endif

#ifndef MAXFS64
#define MAXFS64 3.4028235677973364274807346397956171e38
#endif

#ifndef MAXFUNS64
#define MAXFUNS64 MAXFS64
#endif


#define FUNClinearnumber0000(type)\
        function\
        void linearnumber(\
            export type arr[];\
            type start, end, increment, min, max;\
            ) {\
            if (increment == 0) {\
                error("fee linearnumber death cycle");\
                return;\
            }\
            int len = int(min(ceil((end - start) / increment), ceil((max - min) / abs(increment))));\
            if (len <= 0 || max < min) {\
                resize(arr, 0);\
                return;\
            }\
            resize(arr, len);\
            if (min > start) {\
                arr[0] = start + increment * int(ceil((min - start) / increment));\
            } else {\
                arr[0] = start;\
            }\
            for (int i = 1; i < len; ++i) {\
                if (arr[i-1] >= max || arr[i-1] >= end) {\
                    resize(arr, i-1);\
                    return;\
                }\
                arr[i] = arr[i-1] + increment;\
            }\
            if (arr[len-1] >= max || arr[len-1] >= end) {\
                resize(arr, len-1);\
                return;\
            }\
        }\

DEFINEFUNCif(FUNClinearnumber0000)

#define FUNClinearnumber0001(type)\
        function\
        void linearnumber(\
            export type arr[];\
            type start, end, min, max;\
            ) {\
            linearnumber(arr, start, end, 1, min, max);\
        }\

DEFINEFUNCif(FUNClinearnumber0001)

#define FUNClinearnumber0002(type)\
        function\
        type[] linearnumber(\
            type start, end, increment, min, max;\
            ) {\
            type arr[];\
            linearnumber(arr, start, end, increment, min, max);\
            return arr;\
        }\

DEFINEFUNCif(FUNClinearnumber0002)

#define FUNClinearnumber0003(type)\
        function\
        type[] linearnumber(\
            type start, end, min, max;\
            ) {\
            type arr[];\
            linearnumber(arr, start, end, 1, min, max);\
            return arr;\
        }\

DEFINEFUNCif(FUNClinearnumber0003)


// function
// void linearnumber(
//     export float arr[];
//     float start, end, increment;
//     ) {
//     if ( increment == 0 ) {
//         error("fee linearnumber death cycle");
//         return;
//     }

//     int len = int(ceil((end - start) / increment));
//     if ( len < 0 ) {
//         resize(arr, 0);
//         return;
//     }
    
//     resize(arr, len);
//     float lastValue = start;
//     arr[0] = lastValue;
//     for (int i = 1; i < len; ++i) {
//         lastValue += increment;
//         arr[i] = lastValue;
//     }
// }

#define FUNClinearnumber(type)\
        function\
        void linearnumber(\
            export type arr[];\
            type start, end, increment;\
            ) {\
            if (increment == 0) {\
                error("fee linearnumber death cycle");\
                return;\
            }\
                \
            int len = int(ceil((end - start) / increment));\
            if (len < 0) {\
                resize(arr, 0);\
                return;\
            }\
                \
            resize(arr, len);\
            arr[0] = start;\
            type lastValue = start;\
            for (int i = 1; i < len; ++i) {\
                lastValue += increment;\
                arr[i] = lastValue;\
            }\
        }\

DEFINEFUNCif(FUNClinearnumber)

#define FUNClinearnumber000(type)\
        function\
        void linearnumber(\
            export string arr[];\
            type start, end, increment;\
            ) {\
            if (increment == 0) {\
                error("fee linearnumber death cycle");\
                return;\
            }\
                \
            int len = int(ceil((end - start) / increment));\
            if (len < 0) {\
                resize(arr, 0);\
                return;\
            }\
                \
            resize(arr, len);\
            type value = start;\
            arr[0] = itoa(value);\
            for (int i = 1; i < len; ++i) {\
                value += increment;\
                arr[i] = itoa(value);\
            }\
        }\

DEFINEFUNCi(FUNClinearnumber000)


#define FUNClinearnumber001(type)\
        function\
        void linearnumber(\
            export string arr[];\
            type start, end;\
            ) {\
            linearnumber(arr, start, end, 1);\
        }\

DEFINEFUNCi(FUNClinearnumber001)

#define FUNClinearnumber002(type)\
        function\
        void linearnumber(\
            export string arr[];\
            type end;\
            ) {\
            linearnumber(arr, 0, end, 1);\
        }\

DEFINEFUNCi(FUNClinearnumber002)


#define FUNClinearnumber01(type)\
        function\
        void linearnumber(\
            export type arr[];\
            type start, end;\
            ) {\
            linearnumber(arr, start, end, 1);\
        }\

DEFINEFUNCif(FUNClinearnumber01)

#define FUNClinearnumber02(type)\
        function\
        void linearnumber(\
            export type arr[];\
            type end;\
            ) {\
            linearnumber(arr, 0, end, 1);\
        }\

DEFINEFUNCif(FUNClinearnumber02)

#define FUNClinearnumber0(type)\
        function\
        type[] linearnumber(\
            type start, end, increment;\
            ) {\
            type arr[];\
            linearnumber(arr, start, end, increment);\
            return arr;\
        }\

/*
int linearnumberi[] = linearnumber(start, end, 1);
*/
DEFINEFUNCif(FUNClinearnumber0)

function
int[] linearnumber(
    int start, end;
    ) {
    int arr[];
    int len = end - start;
    if ( len <= 0 ) return arr;
    resize(arr, len);
    arr[0] = start;
    for (int i = 1; i < len; ++i) {
        arr[i] = arr[i-1] + 1;
    }
    return arr;
}

#define FUNClinearnumber1(type)\
        function\
        type[] linearnumber(\
            type start, end;\
            ) {\
            type arr[];\
            linearnumber(arr, start, end);\
            return arr;\
        }\

DEFINEFUNCf(FUNClinearnumber1)

#define FUNClinearnumber2(type)\
        function\
        type[] linearnumber(\
            type end;\
            ) {\
            type arr[];\
            linearnumber(arr, end);\
            return arr;\
        }\

DEFINEFUNCif(FUNClinearnumber2)



function
vector[] linearnumber(
    vector start, end, increment;
    ) {
    float x[] = linearnumber(start.x, end.x, increment.x),
          y[] = linearnumber(start.y, end.y, increment.y),
          z[] = linearnumber(start.z, end.z, increment.z);
    vector result[];
    int minlen = min(len(x), len(y), len(z));
    for (int i = 0; i < minlen; ++i) {
        push(result, vector(set(x[i], y[i], z[i])));
    }
    return result;
}

#define linearnumberi linearnumber
#define linearnumberf linearnumber
#define linearnumberv linearnumber


/*

function
int[] naturalnumber(
    int end;
    ) {
    int result[];
    resize(result, end);
    for (int i = 0; i < end; ++i) {
        result[i] = i;
    }
    return result;
}

*/

#define FUNCnaturalnumber(type)\
        function\
        type[] naturalnumber(\
            type end;\
            ) {\
            return linearnumber(0, end, 1);\
        }\

DEFINEFUNCif(FUNCnaturalnumber)
#define naturalnum naturalnumber

#define FUNCnaturalnumber0(type)\
        function\
        type[] naturalnumber(\
            type end, min, max;\
            ) {\
            return linearnumber(type(0), end, 1, min, max);\
        }\

DEFINEFUNCif(FUNCnaturalnumber0)


#define FUNCpositivenumber(type)\
        function\
        type[] positivenumber(\
            type end;\
            ) {\
            return linearnumber(1, end, 1);\
        }\

DEFINEFUNCif(FUNCpositivenumber)
#define positivenum positivenumber

#define FUNCpositivenumber0(type)\
        function\
        type[] positivenumber(\
            type end, min, max;\
            ) {\
            return linearnumber(1, end, 1, min, max);\
        }\

DEFINEFUNCif(FUNCpositivenumber0)


/*

function
int[] combinatorialnaturalnumber(
    int end;
    int n;
    ) {
    for
    return linearnumberi(0, end, 1);
}



function
int[] combination(
    int end;
    int arr[];
    ) {
    int lastitem = 1 + arr[len(arr)-1];
    if (find(arr, lastitem) != -len(arr)-1) {
        return combination(arr);
    } else {
    
    }
}
*/

function
int fibonacci(
    const int term;
    ) {
    float sqrt5 = sqrt(5);
    return int((pow((1+sqrt5)/2,term) - pow((1-sqrt5)/2,term)) / sqrt5);
}

function
int fibonaccitable(
    const int term;
    ) {
    if ( term == 0 ) {
        return 0;
    } else if ( term == 1 ) {
        return 1;
    } else if ( term == 2 ) {
        return 1;
    } else if ( term == 3 ) {
        return 2;
    } else if ( term == 4 ) {
        return 3;
    } else if ( term == 5 ) {
        return 5;
    } else if ( term == 6 ) {
        return 8;
    } else if ( term == 7 ) {
        return 13;
    } else if ( term == 8 ) {
        return 21;
    } else if ( term == 9 ) {
        return 34;
    } else if ( term == 10 ) {
        return 55;
    } else if ( term == 11 ) {
        return 89;
    } else if ( term == 12 ) {
        return 144;
    } else if ( term == 13 ) {
        return 233;
    } else if ( term == 14 ) {
        return 377;
    } else if ( term == 15 ) {
        return 610;
    } else if ( term == 16 ) {
        return 987;
    } else if ( term == 17 ) {
        return 1597;
    } else if ( term == 18 ) {
        return 2584;
    } else if ( term == 19 ) {
        return 4181;
    } else if ( term == 20 ) {
        return 6765;
    } else {
        warning('fee fibonacci table out of range');
        return fibonacci(term);
    }
    return -1;
}



function
int numelem(
    const int geo;
    const int class;
    ) {
    if ( class == 0 ) return nprimitives(geo);
    else if ( class == 1 ) return npoints(geo);
    else if ( class == 2 ) return nvertices(geo);
    else return -1;
}

function
int numelem(
    const int geo;
    const string class;
    ) {
    if ( class == 'point' ) return npoints(geo);
    else if ( class == 'points' ) return npoints(geo);
    else if ( class == 'vertex' ) return nvertices(geo);
    else if ( class == 'vertices' ) return nvertices(geo);
    else if ( class == 'prim' ) return nprimitives(geo);
    else if ( class == 'prims' ) return nprimitives(geo);
    else if ( class == 'primitive' ) return nprimitives(geo);
    else if ( class == 'primitives' ) return nprimitives(geo);
    else return -1;
}

function
int numelemgroup(
    const int geo;
    const string group;
    const string class;
    ) {
    if ( class == 'point' ) return npointsgroup(geo, group);
    else if ( class == 'points' ) return npointsgroup(geo, group);
    else if ( class == 'vertex' ) return nverticesgroup(geo, group);
    else if ( class == 'vertices' ) return nverticesgroup(geo, group);
    else if ( class == 'prim' ) return nprimitivesgroup(geo, group);
    else if ( class == 'prims' ) return nprimitivesgroup(geo, group);
    else if ( class == 'primitive' ) return nprimitivesgroup(geo, group);
    else if ( class == 'primitives' ) return nprimitivesgroup(geo, group);
    else return -1;
}









#endif
